(()=>{var e={112:(e,t,r)=>{const o=r(172),{shipLengths:n}=r(603);function a(e,t){for(const[r,o]of t)e[r][o]={}}e.exports=function(){const e=function(){const e={};for(let t="A".charCodeAt(0);t<="J".charCodeAt(0);t++){const r=String.fromCharCode(t);e[r]={};for(let t=1;t<=10;t++){const o=t.toString();e[r][o]={}}}return e}();let t={},r={};const s={carrier:o("carrier",n.carrier),cruiser:o("cruiser",n.cruiser),destroyer:o("destroyer",n.destroyer),submarine:o("submarine",n.submarine),battleship:o("battleship",n.battleship)};let i=[],c=[];return{getBoard:()=>e,getShipLocation:()=>t,getShips:()=>s,getMissedAttacks:()=>i,getSuccessfulAttacks:()=>c,allShipsSunk:function(){return Object.values(s).every((e=>e.isSunk()))},reset:()=>{for(const r in s){const o=t[r];o&&a(e,o)}t={},i=[],c=[],r={}},setPlayerAttack:(e,t)=>{r[e]=t},getPlayerAttack:()=>r,resetPlayerAttack:()=>{r={}}}}},560:e=>{e.exports=function(e,t,r,o){!function(e,t,r,o){let n=[];for(let a=0;a<t;a++){const s="ABCDEFGHIJ"[a],i=document.createElement("div");i.classList.add(`row-${s}`),i.style.cssText="display: flex;";for(let e=1;e<=t;e++){const t=document.createElement("div");t.classList.add(`col-${s}-${e}`),t.classList.add("hover"),t.setAttribute("data-player-id",r),t.style.cssText="width: 40px; height: 40px; border: 4px solid #8b8589;",t.addEventListener("click",(r=>{const a=s,i=String(e);t.classList.remove("hover"),t.classList.add("clicked"),n=[],n.push(a),n.push(i);const c=t.getAttribute("data-player-id");"player2"===c?o.getPlayerOneBoard().setPlayerAttack("attack",n):"player1"===c&&o.getPlayerTwoBoard().setPlayerAttack("attack",n)})),i.appendChild(t)}e.appendChild(i)}}(e,t,r,o)}},612:(e,t,r)=>{const o=r(144),n=r(112);e.exports=(e,t)=>{const r=o(e),a=o(t),s=n(),i=n(),c={player1:s,player2:i},l={player1:0,player2:0};return{getPlayerOne:()=>r,getPlayerTwo:()=>a,getPlayerOneBoard:()=>s,getPlayerTwoBoard:()=>i,resetBoard:()=>{for(const e in c)c[e].reset()},incrementWinCount:e=>{e===r?l.player1++:e===a&&l.player2++},getWinCount:()=>l}}},603:e=>{const t={destroyer:2,cruiser:3,submarine:3,battleship:4,carrier:5},r=document.querySelectorAll(".shipbutton-container");function o(e,t,r,o,n){return"vertical"===r&&o.includes(e)&&n.includes(t)||"horizontal"===r&&o.includes(e)&&n.includes(t)}e.exports={addShipButtonEventListener:function(e,r){r.addEventListener("click",(()=>{const n=r.classList[0],a=r.value,s=prompt(`Please enter 'vertical' or 'horizontal' for ${n}:`);var i;"vertical"===(i=s)||"horizontal"===i?function(e,t,r,n,a){console.log(`${n}'s turn to place ${t}`);const s=[],i=function(e,t){return"player1"===t?e.getPlayerOneBoard():e.getPlayerTwoBoard()}(e,n),{validRows:c,validCols:l}=function(e,t){let r,o;return"vertical"===e?(r="ABCDEFGHIJ".slice(0,10-(t-1)),o=Array.from({length:10},((e,t)=>(t+1).toString()))):"horizontal"===e&&(r="ABCDEFGHIJ",o=Array.from({length:10-(t-1)},((e,t)=>(t+1).toString()))),{validRows:r,validCols:o}}(a,r);for(;s.length<r;){const e=prompt(`Please input coordinate for ${t} (ex: A1):`).toUpperCase().split(""),n=e[0],i=e[1];if(o(n,i,a,c,l))for(let e=0;e<r;e++){const t="vertical"===a?String.fromCharCode(n.charCodeAt(0)+e):n,r="horizontal"===a?String.fromCharCode(i.charCodeAt(0)+e):i;s.push([t,r])}else console.error("Invalid coordinates. Please enter valid coordinates.")}console.log(s),function(e,t,r,o){if(o.length!==r)return void console.log(`Invalid ship coordinates for ${t}. Please provide ${r} coordinates.`);if(function(e,t){const r=e.getShipLocation();for(const e in r){const o=r[e];for(const[e,r]of t)if(o.some((([t,o])=>t===e&&o===r)))return!0}return!1}(e,o))return void console.log("Invalid ship placement. Coordinates are already occupied.");!function(e,t,r,o){for(const[t,n]of o)e[t][n]=r.charAt(0).toLowerCase();t[r]=o}(e.getBoard(),e.getShipLocation(),t,o)}(i,t,r,s)}(e,n,t[n],a,s):console.error('Invalid alignment input. Please enter either "vertical" or "horizontal".')}))},showShipButtons:function(){r.forEach((e=>{e.classList.remove("hidden")}))},getPlayerName:function(e){let t=prompt(e);for(;"string"!=typeof(r=t)||""===r.trim()||!/^[a-zA-Z\s]+$/.test(r);)alert("Invalid name. Please enter a valid string."),t=prompt(e);var r;return t},boardSize:10,timeoutDuration:6e3,shipLengths:t,receiveAttack:function(e,t){const r=document.querySelector(".hit-text"),[o,n]=e,a=t.getSuccessfulAttacks();if(a.some((([e,t])=>e===o&&t===n)))return void(r.textContent="This target has already been successfully attacked.");const s=function(e,t){const[r,o]=e,n=t.getShipLocation();for(const e in n){const t=n[e];for(const[n,a]of t)if(n===r&&a===o)return e}return null}(e,t);if(s){const e=t.getShips()[s];if(!e.isSunk()){e.isHit(),a.push([o,n]);const t=e.length-e.getHitCount();e.isSunk()?r.textContent=`${s} is sunk!`:r.textContent=`${s} is hit! Remaining health: ${t}`}}else r.textContent="Missed the target!",t.getMissedAttacks().push(e)}}},144:e=>{e.exports=function(e){const t=e;return{getName:()=>t,name:t}}},172:e=>{e.exports=function(e,t){return t?{length:t,hit:0,sunk:!1,name:e,isHit(){return this.hit<this.length&&this.hit++,this.hit===this.length},isSunk(){return this.hit===this.length},getHitCount(){return this.hit}}:null}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,r),a.exports}(()=>{const e=r(612),t=r(560),{addShipButtonEventListener:o,showShipButtons:n,getPlayerName:a,boardSize:s,timeoutDuration:i,receiveAttack:c}=r(603),l=document.querySelector(".start"),u=document.querySelector(".create-board"),d=document.querySelector(".player1-container"),h=document.querySelector(".player2-container"),p=document.querySelector(".player-turn"),y=document.querySelector(".place-ship"),g=document.querySelectorAll(".cruiser"),f=document.querySelectorAll(".carrier"),m=document.querySelectorAll(".battleship"),v=document.querySelectorAll(".submarine"),S=document.querySelectorAll(".destroyer");let k;u.addEventListener("click",(function(){const r=a("Enter player 1 Name"),n=a("Enter player 2 Name");k=e(r,n),console.log(k),t(d,s,"player1",k),t(h,s,"player2",k),g.forEach((e=>o(k,e))),f.forEach((e=>o(k,e))),m.forEach((e=>o(k,e))),v.forEach((e=>o(k,e))),S.forEach((e=>o(k,e)))})),y.addEventListener("click",n),l.addEventListener("click",(async function(){const e=k.getPlayerOne(),t=k.getPlayerTwo(),r=k.getPlayerOneBoard(),o=k.getPlayerTwoBoard();let n=null,a=e;const s=async()=>{const l=a===e?r:o,u=await function(e){return new Promise((t=>{const r=e===k.getPlayerOne()?k.getPlayerOneBoard():k.getPlayerTwoBoard(),o=async()=>{const n=r.getPlayerAttack();if(n&&0!==Object.keys(n).length){const e=n.attack;t(e)}else p.textContent=`Player ${e.getName()}, please click on a grid/tile/coordinate.`,await new Promise((e=>setTimeout(e,i))),await o()};o()}))}(a);console.log(u),console.log(`${a.getName()} attacks: ${u}`);const d=a===e?o:r;c(u,d),d.allShipsSunk()?(n=a===e?t:e,A(n)):(l.resetPlayerAttack(),console.log(l.getPlayerAttack()),a=a===e?t:e,s())};s()}));const A=e=>{const t=document.querySelector(".winner-text"),r=document.querySelector(".total-text"),o=document.querySelector(".hit-text"),n=k.getWinCount();t.textContent=`Winner: ${e.getName()}`,r.textContent=`Total Wins - Player1: ${n.player1}, Player2: ${n.player2}`,o.textContent="",document.querySelectorAll(".col").forEach((e=>e.classList.remove("clicked"))),k.resetBoard()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,