(()=>{var t={112:(t,e,r)=>{const n=r(172);function o(t,e){for(const[r,n]of e)t[r][n]={}}t.exports={createGameBoard:function(){const t=function(){const t={};for(let e="A".charCodeAt(0);e<="J".charCodeAt(0);e++){const r=String.fromCharCode(e);t[r]={};for(let e=1;e<=10;e++){const n=e.toString();t[r][n]={}}}return t}();let e={},r={};const s={carrier:n("carrier"),cruiser:n("cruiser"),destroyer:n("destroyer"),submarine:n("submarine"),battleship:n("battleship")};let a=[],c=[];return{getBoard:()=>t,getShipLocation:()=>e,getShips:()=>s,getMissedAttacks:()=>a,getSuccessfulAttacks:()=>c,allShipsSunk:function(){return Object.values(s).every((t=>t.isSunk()))},reset:()=>{for(const r in s){const n=e[r];n&&o(t,n)}e={},a=[],c=[],r={}},setPlayerAttack:(t,e)=>{r[t]=e},getPlayerAttack:()=>r,resetPlayerAttack:()=>{r={}}}},placeShip:function(t,e,r,n){n.length===r?function(t,e,r,n){for(const[e,o]of n)t[e][o]=r.charAt(0).toLowerCase();e[r]=n}(t.getBoard(),t.getShipLocation(),e,n):console.log(`Invalid ship coordinates for ${e}. Please provide ${r} coordinates.`)},receiveAttack:function(t,e){const r=document.querySelector(".hit-text"),[n,o]=t,s=e.getSuccessfulAttacks();if(s.some((([t,e])=>t===n&&e===o)))return void(r.textContent="This target has already been successfully attacked.");const a=function(t,e){const[r,n]=t,o=e.getShipLocation();for(const t in o){const e=o[t];for(const[o,s]of e)if(console.log(o,s,r,n),o===r&&s===n)return t}return null}(t,e);if(a){const t=e.getShips()[a];if(!t.isSunk()){t.isHit(),s.push([n,o]);const e=t.length-t.getHitCount();t.isSunk()?r.textContent=`${a} is sunk!`:r.textContent=`${a} is hit! Remaining health: ${e}`}}else r.textContent="Missed the target!",e.getMissedAttacks().push(t)}}},560:t=>{t.exports=function(t,e,r,n){!function(t,e,r,n){let o=[];for(let s=0;s<e;s++){const a="ABCDEFGHIJ"[s],c=document.createElement("div");c.classList.add(`row-${a}`),c.style.cssText="display: flex;";for(let t=1;t<=e;t++){const e=document.createElement("div");e.classList.add(`col-${a}-${t}`),e.classList.add("hover"),e.setAttribute("data-player-id",r),e.style.cssText="width: 40px; height: 40px; border: 4px solid #8b8589;",e.addEventListener("click",(r=>{const s=a,c=String(t);e.classList.remove("hover"),e.classList.add("clicked"),o=[],o.push(s),o.push(c);const i=e.getAttribute("data-player-id");"player2"===i?n.getPlayerOneBoard().setPlayerAttack("attack",o):"player1"===i&&n.getPlayerTwoBoard().setPlayerAttack("attack",o)})),c.appendChild(e)}t.appendChild(c)}}(t,e,r,n)}},612:(t,e,r)=>{const n=r(144),{createGameBoard:o,receiveAttack:s,placeShip:a}=r(112);function c(t){const e=t.getShips();let r="A".charCodeAt(0);for(const n in e){const o=e[n].length,s=i(o,r);a(t,n,o,s),r++}}function i(t,e){const r=[];for(let n=0;n<t;n++){const t=(n+1).toString(),o=String.fromCharCode(e);r.push([o,t])}return r}t.exports=(t,e)=>{const r=n(t),s=n(e),a=o(),i=o(),l={player1:a,player2:i};for(const t in l)c(l[t]);const u={player1:0,player2:0};return{getPlayerOne:()=>r,getPlayerTwo:()=>s,getPlayerOneBoard:()=>a,getPlayerTwoBoard:()=>i,resetBoard:()=>{for(const t in l)l[t].reset()},incrementWinCount:t=>{t===r?u.player1++:t===s&&u.player2++},getWinCount:()=>u}}},144:t=>{t.exports=function(t){const e=t;return{getName:()=>e,name:e}}},172:t=>{t.exports=function(t){const e={destroyer:2,cruiser:3,submarine:3,battleship:4,carrier:5}[t];return e?{length:e,hit:0,sunk:!1,name:t,isHit(){return this.hit<this.length&&this.hit++,this.hit===this.length},isSunk(){return this.hit===this.length},getHitCount(){return this.hit}}:null}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n](s,s.exports,r),s.exports}(()=>{const t=r(612),e=r(560),{receiveAttack:n}=r(112),o=document.querySelector(".start"),s=document.querySelector(".create-board"),a=document.querySelector(".player1-container"),c=document.querySelector(".player2-container"),i=document.querySelector(".player-turn");let l;function u(t){let e=prompt(t);for(;"string"!=typeof(r=e)||""===r.trim()||!/^[a-zA-Z\s]+$/.test(r);)alert("Invalid name. Please enter a valid string."),e=prompt(t);var r;return e}s.addEventListener("click",(()=>{const r=u("Enter player 1 Name"),n=u("Enter player 2 Name");l=t(r,n),console.log(l),e(a,10,"player1",l),e(c,10,"player2",l)})),o.addEventListener("click",(()=>{!async function(){const t=l.getPlayerOne(),e=l.getPlayerTwo(),r=l.getPlayerOneBoard(),o=l.getPlayerTwoBoard();let s=null,a=t;const c=async()=>{const u=a===t?r:o,y=await function(t){return new Promise((e=>{const r=t===l.getPlayerOne()?l.getPlayerOneBoard():l.getPlayerTwoBoard(),n=async()=>{const o=r.getPlayerAttack();if(o&&0!==Object.keys(o).length){const t=o.attack;e(t)}else i.textContent=`Player ${t.getName()}, please click on a grid/tile/coordinate.`,await new Promise((t=>setTimeout(t,6e3))),await n()};n()}))}(a);console.log(y),console.log(`${a.getName()} attacks: ${y}`);const p=a===t?o:r;n(y,p),p.allShipsSunk()?(s=a===t?e:t,d(s)):(u.resetPlayerAttack(),console.log(u.getPlayerAttack()),a=a===t?e:t,c())};c()}()}));const d=t=>{const e=document.querySelector(".winner-text"),r=document.querySelector(".total-text"),n=document.querySelector(".hit-text"),o=l.getWinCount();e.textContent=`Winner: ${t.getName()}`,r.textContent=`Total Wins - Player1: ${o.player1}, Player2: ${o.player2}`,n.textContent="",document.querySelectorAll(".col").forEach((t=>t.classList.remove("clicked"))),l.resetBoard()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,