(()=>{var e={112:(e,t,o)=>{const n=o(172);function r(e,t){for(const[o,n]of t)e[o][n]={}}e.exports={createGameBoard:function(){const e=function(){const e={};for(let t="A".charCodeAt(0);t<="J".charCodeAt(0);t++){const o=String.fromCharCode(t);e[o]={};for(let t=1;t<=10;t++){const n=t.toString();e[o][n]={}}}return e}();let t={},o={};const s={carrier:n("carrier"),cruiser:n("cruiser"),destroyer:n("destroyer"),submarine:n("submarine"),battleship:n("battleship")};let a=[],c=[];return{getBoard:()=>e,getShipLocation:()=>t,getShips:()=>s,getMissedAttacks:()=>a,getSuccessfulAttacks:()=>c,allShipsSunk:function(){return Object.values(s).every((e=>e.isSunk()))},reset:()=>{for(const o in s){const n=t[o];n&&r(e,n)}t={},a=[],c=[],o={}},setPlayerAttack:(e,t)=>{o[e]=t},getPlayerAttack:()=>o,resetPlayerAttack:()=>{o={}}}},placeShip:function(e,t,o,n){n.length===o?function(e,t,o,n){for(const[t,r]of n)e[t][r]=o.charAt(0).toLowerCase();t[o]=n}(e.getBoard(),e.getShipLocation(),t,n):console.log(`Invalid ship coordinates for ${t}. Please provide ${o} coordinates.`)},receiveAttack:function(e,t){const[o,n]=e,r=t.getSuccessfulAttacks();if(console.log(r),r.some((([e,t])=>e===o&&t===n)))return void console.log("This target has already been successfully attacked.");const s=function(e,t){const[o,n]=e,r=t.getShipLocation();for(const e in r){const t=r[e];for(const[r,s]of t)if(console.log(r,s,o,n),r===o&&s===n)return e}return null}(e,t);if(console.log(s),s){const e=t.getShips()[s];e.isSunk()||(e.isHit(),r.push([o,n]),e.isSunk()?console.log(`${s} is sunk!`):console.log(`${s} is hit!`))}else console.log("Missed the target!"),t.getMissedAttacks().push(e)}}},560:e=>{e.exports=function(e,t,o,n){!function(e,t,o,n){let r=[];for(let s=0;s<t;s++){const a="ABCDEFGHIJ"[s],c=document.createElement("div");c.classList.add(`row-${a}`),c.style.cssText="display: flex;";for(let e=1;e<=t;e++){const t=document.createElement("div");t.classList.add(`col-${a}-${e}`),t.setAttribute("data-player-id",o),t.style.cssText="width: 80px; height: 80px; border: 4px solid #8b8589; font-size: 3rem; display: flex; justify-content: center; align-items: center;",t.addEventListener("click",(o=>{const s=a,c=String(e);r=[],r.push(s),r.push(c);const l=t.getAttribute("data-player-id");"player2"===l?n.getPlayerOneBoard().setPlayerAttack("attack",r):"player1"===l&&n.getPlayerTwoBoard().setPlayerAttack("attack",r)})),c.appendChild(t)}e.appendChild(c)}}(e,t,o,n)}},612:(e,t,o)=>{const n=o(144),{createGameBoard:r,receiveAttack:s,placeShip:a}=o(112);function c(e){const t=e.getShips();let o="A".charCodeAt(0);for(const n in t){const r=t[n].length,s=l(r,o);a(e,n,r,s),o++}}function l(e,t){const o=[];for(let n=0;n<e;n++){const e=(n+1).toString(),r=String.fromCharCode(t);o.push([r,e])}return o}e.exports=(e,t)=>{const o=n(e),s=n(t),a=r(),l=r(),i={player1:a,player2:l};for(const e in i)c(i[e]);const u={player1:0,player2:0};return{getPlayerOne:()=>o,getPlayerTwo:()=>s,getPlayerOneBoard:()=>a,getPlayerTwoBoard:()=>l,resetBoard:()=>{for(const e in i)i[e].reset()},incrementWinCount:e=>{e===o?u.player1++:e===s&&u.player2++},getWinCount:()=>u}}},144:e=>{e.exports=function(e){const t=e;return{getName:()=>t,name:t}}},172:e=>{e.exports=function(e){const t={destroyer:2,cruiser:3,submarine:3,battleship:4,carrier:5}[e];return t?{length:t,hit:0,sunk:!1,name:e,isHit(){return this.hit<this.length&&this.hit++,this.hit===this.length},isSunk(){return this.hit===this.length}}:null}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}(()=>{const e=o(612),t=o(560),{receiveAttack:n}=o(112),r=document.querySelector(".start"),s=document.querySelector(".create-board"),a=document.querySelector(".player1-container"),c=document.querySelector(".player2-container");let l;function i(e){let t=prompt(e);for(;"string"!=typeof(o=t)||""===o.trim()||!/^[a-zA-Z\s]+$/.test(o);)alert("Invalid name. Please enter a valid string."),t=prompt(e);var o;return t}s.addEventListener("click",(()=>{const o=i("Enter player 1 Name"),n=i("Enter player 2 Name");l=e(o,n),console.log(l),t(a,10,"player1",l),t(c,10,"player2",l)})),r.addEventListener("click",(()=>{!async function(){const e=l.getPlayerOne(),t=l.getPlayerTwo(),o=l.getPlayerOneBoard();console.log(o.getShipLocation());const r=l.getPlayerTwoBoard();let s=null,a=e;const c=async()=>{const i=a===e?o:r,g=await function(e){return new Promise((t=>{const o=e===l.getPlayerOne()?l.getPlayerOneBoard():l.getPlayerTwoBoard(),n=async()=>{const r=o.getPlayerAttack();if(console.log(r),r&&0!==Object.keys(r).length){const e=r.attack;console.log(e),t(e)}else console.log(`Player ${e.getName()}, please click on a grid/tile/coordinate.`),await new Promise((e=>setTimeout(e,6e3))),await n()};n()}))}(a);console.log(g),console.log(`${a.getName()} attacks: ${g}`);const d=a===e?r:o;n(g,d),d.allShipsSunk()?(s=a===e?t:e,u(s)):(i.resetPlayerAttack(),console.log(i.getPlayerAttack()),a=a===e?t:e,c())};c()}()}));const u=e=>{const t=document.querySelector(".winner-text"),o=document.querySelector(".total-text"),n=gameSetup.getWinCount();t.textContent=`Winner: ${e.getName()}`,o.textContent=`Total Wins - Player1: ${n.player1}, Player2: ${n.player2}`,gameSetup.incrementWinCount(e),gameSetup.resetBoard()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,